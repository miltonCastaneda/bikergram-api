{
  "_args": [
    [
      {
        "raw": "micro",
        "scope": null,
        "escapedName": "micro",
        "name": "micro",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\projects\\JavaScript\\bikergram\\bikergram-api"
    ]
  ],
  "_from": "micro@latest",
  "_id": "micro@7.3.3",
  "_inCache": true,
  "_location": "/micro",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/micro-7.3.3.tgz_1494246709581_0.27411278896033764"
  },
  "_npmUser": {
    "name": "leo",
    "email": "leo@zeit.co"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "micro",
    "scope": null,
    "escapedName": "micro",
    "name": "micro",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/micro/-/micro-7.3.3.tgz",
  "_shasum": "8261c56d2a31a7df93986eff86441396f2b4b070",
  "_shrinkwrap": null,
  "_spec": "micro",
  "_where": "C:\\projects\\JavaScript\\bikergram\\bikergram-api",
  "author": {
    "name": "Zeit, Inc.",
    "email": "team@zeit.co"
  },
  "bin": {
    "micro": "./bin/micro.js"
  },
  "bugs": {
    "url": "https://github.com/zeit/micro/issues"
  },
  "dependencies": {
    "args": "2.6.1",
    "async-to-gen": "1.3.3",
    "bluebird": "3.5.0",
    "boxen": "1.1.0",
    "chalk": "1.1.3",
    "clipboardy": "1.1.1",
    "get-port": "3.1.0",
    "ip": "1.1.5",
    "is-async-supported": "1.2.0",
    "isstream": "0.1.2",
    "media-typer": "0.3.0",
    "node-version": "1.0.0",
    "raw-body": "2.2.0",
    "update-notifier": "2.1.0"
  },
  "description": "Asynchronous HTTP microservices",
  "devDependencies": {
    "ava": "0.19.1",
    "coveralls": "2.13.1",
    "eslint-config-prettier": "2.0.0",
    "husky": "0.13.3",
    "lint-staged": "3.4.1",
    "nyc": "10.3.2",
    "prettier": "1.3.1",
    "request": "2.81.0",
    "request-promise": "4.2.1",
    "resumer": "0.0.0",
    "test-listen": "1.0.2",
    "then-sleep": "1.0.1",
    "xo": "0.18.2"
  },
  "directories": {},
  "dist": {
    "shasum": "8261c56d2a31a7df93986eff86441396f2b4b070",
    "tarball": "https://registry.npmjs.org/micro/-/micro-7.3.3.tgz"
  },
  "files": [
    "bin",
    "lib"
  ],
  "gitHead": "c62dd2859b516c3e1b5cc41f6b9b016ec146a111",
  "homepage": "https://github.com/zeit/micro#readme",
  "keywords": [
    "micro",
    "service",
    "microservice",
    "serverless",
    "API"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "npm run lint",
      "prettier --single-quote --no-semi --write",
      "git add"
    ]
  },
  "main": "./lib/server.js",
  "maintainers": [
    {
      "name": "leo",
      "email": "mindrun@icloud.com"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    }
  ],
  "name": "micro",
  "optionalDependencies": {},
  "readme": "![](https://raw.githubusercontent.com/zeit/art/31913be3107827adf10e1f491ec61480f63e19af/micro/logo.png)\n\n_**Micro â€”** Async ES6 HTTP microservices_\n\n[![Build Status](https://travis-ci.org/zeit/micro.svg?branch=master)](https://travis-ci.org/zeit/micro)\n[![Coverage Status](https://coveralls.io/repos/github/zeit/micro/badge.svg?branch=master)](https://coveralls.io/github/zeit/micro?branch=master)\n[![Slack Channel](http://zeit-slackin.now.sh/badge.svg)](https://zeit.chat/)\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n\n## Features\n\n* **Easy**. Designed for usage with `async` and `await` ([more](https://zeit.co/blog/async-and-await))\n* **Fast**. Ultra-high performance (even JSON parsing is opt-in).\n* **Micro**. The whole project is ~100 lines of code.\n* **Agile**. Super easy deployment and containerization.\n* **Simple**. Oriented for single purpose modules (function).\n* **Explicit**. No middleware. Modules declare all dependencies.\n* **Standard**. Just HTTP!\n* **Lightweight**. The package is small and the `async` transpilation is fast and transparent\n\n## Usage\n\nFirstly, install it:\n\n```bash\nnpm install --save micro\n```\n\nThen add a `start` script to your `package.json` like this:\n\n```json\n{\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"micro\"\n  }\n}\n```\n\nThen create an `index.js` file and populate it with function, that accepts standard [http.IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage) and [http.ServerResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse) objects:\n\n```js\nmodule.exports = (req, res) => { res.end('Welcome to micro') }\n```\n\nMicro provides [useful helpers](https://github.com/zeit/micro#body-parsing) but also handles return values â€“ so you can write it even shorter!\n\n```js\nmodule.exports = () => 'Welcome to micro'\n```\n\nOnce all of that is done, just start the server:\n\n```bash\nnpm start\n```\n\nAnd go to this URL: `http://localhost:3000` - ðŸŽ‰\n\nNow make sure to check out [awesome-micro](https://github.com/amio/awesome-micro) - a collection of plugins for micro!\n\n### `async` & `await`\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul><li><a href=\"./examples/external-api-call\">Fetch external api</a></li></ul>\n</details></p>\n\nMicro is built for usage with async/await. You can read more about async / await [here](https://zeit.co/blog/async-and-await)\n\n```js\nconst sleep = require('then-sleep')\n\nmodule.exports = async (req, res) => {\n  await sleep(500)\n  return 'Ready!'\n}\n```\n\n#### Transpilation\n\nWe use [is-async-supported](https://github.com/timneutkens/is-async-supported) combined with [async-to-gen](https://github.com/leebyron/async-to-gen),\nso that the we only convert `async` and `await` to generators when needed.\n\nIf you want to do it manually, you can! `micro(1)` is idempotent and\nshould not interfere.\n\n`micro` exclusively supports Node 6+ to avoid a big transpilation\npipeline. `async-to-gen` is fast and can be distributed with\nthe main `micro` package due to its small size.\n\n### Body parsing\n\n<p id=\"body-parsing-examples\"><details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"./examples/json-body-parsing\">Parse JSON</a></li>\n    <li><a href=\"./examples/urlencoded-body-parsing\">Parse urlencoded form (html `form` tag)</a></li>\n  </ul>\n</details></p>\n\nFor parsing the incoming request body we included an async functions `buffer`, `text` and `json`\n\n```js\nconst {buffer, text, json} = require('micro')\n\nmodule.exports = async (req, res) => {\n  const buf = await buffer(req)\n  console.log(buf)\n  // <Buffer 7b 22 70 72 69 63 65 22 3a 20 39 2e 39 39 7d>\n  const txt = await text(req)\n  // '{\"price\": 9.99}'\n  const js = await json(req)\n  // { price: 9.99 }\n  console.log(js.price)\n  return ''\n}\n```\n\n#### API\n\n##### `buffer(req, { limit = '1mb', encoding = 'utf8' })`\n##### `text(req, { limit = '1mb', encoding = 'utf8' })`\n##### `json(req, { limit = '1mb', encoding = 'utf8' })`\n\n- Buffers and parses the incoming body and returns it.\n- Exposes an `async` function that can be run with  `await`.\n- Can be called multiple times, as it caches the raw request body the first time.\n- `limit` is how much data is aggregated before parsing at max. Otherwise, an `Error` is thrown with `statusCode` set to `413` (see [Error Handling](#error-handling)). It can be a `Number` of bytes or [a string](https://www.npmjs.com/package/bytes) like `'1mb'`.\n- If JSON parsing fails, an `Error` is thrown with `statusCode` set to `400` (see [Error Handling](#error-handling))\n\nFor other types of data check the [examples](#body-parsing-examples)\n\n### Sending a different status code\n\nSo far we have used `return` to send data to the client. `return 'Hello World'` is the equivalent of `send(res, 200, 'Hello World')`.\n\n```js\nconst {send} = require('micro')\n\nmodule.exports = async (req, res) => {\n  const statusCode = 400\n  const data = { error: 'Custom error message' }\n\n  send(res, statusCode, data)\n}\n```\n\n#### API\n\n##### `send(res, statusCode, data = null)`\n\n- Use `require('micro').send`.\n- `statusCode` is a `Number` with the HTTP error code, and must always be supplied.\n- If `data` is supplied it is sent in the response. Different input types are processed appropriately, and `Content-Type` and `Content-Length` are automatically set.\n  - `Stream`: `data` is piped as an `octet-stream`. Note: it is _your_ responsibility to handle the `error` event in this case (usually, simply logging the error and aborting the response is enough).\n  - `Buffer`: `data` is written as an `octet-stream`.\n  - `object`: `data` is serialized as JSON.\n  - `string`: `data` is written as-is.\n- If JSON serialization fails (for example, if a cyclical reference is found), a `400` error is thrown. See [Error Handling](#error-handling).\n\n### Programmatic use\n\nYou can use micro programmatically by requiring micro directly:\n\n```js\nconst micro = require('micro')\nconst sleep = require('then-sleep')\n\nconst server = micro(async (req, res) => {\n  await sleep(500)\n  return 'Hello world'\n})\n\nserver.listen(3000)\n```\n\n#### API\n\n##### micro(fn)\n\n- This function is exposed as the `default` export.\n- Use `require('micro')`.\n- Returns a [`http.Server`](https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_class_http_server) that uses the provided `function` as the request handler.\n- The supplied function is run with `await`. So it can be `async`\n\n### Error handling\n\nMicro allows you to write robust microservices. This is accomplished primarily by bringing sanity back to error handling and avoiding callback soup.\n\nIf an error is thrown and not caught by you, the response will automatically be `500`. **Important:** Error stacks will be printed as `console.error` and during development mode (if the env variable `NODE_ENV` is `'development'`), they will also be included in the responses.\n\nIf the `Error` object that's thrown contains a `statusCode` property, that's used as the HTTP code to be sent. Let's say you want to write a rate limiting module:\n\n```js\nconst rateLimit = require('my-rate-limit')\n\nmodule.exports = async (req, res) => {\n  await rateLimit(req)\n  // ... your code\n}\n```\n\nIf the API endpoint is abused, it can throw an error with ``createError`` like so:\n\n```js\nif (tooMany) {\n  throw createError(429, 'Rate limit exceeded')\n}\n```\n\nAlternatively you can create the `Error` object yourself\n\n```js\nif (tooMany) {\n  const err = new Error('Rate limit exceeded')\n  err.statusCode = 429\n  throw err\n}\n```\n\nThe nice thing about this model is that the `statusCode` is merely a suggestion. The user can override it:\n\n```js\ntry {\n  await rateLimit(req)\n} catch (err) {\n  if (429 == err.statusCode) {\n    // perhaps send 500 instead?\n    send(res, 500)\n  }\n}\n```\n\nIf the error is based on another error that **Micro** caught, like a `JSON.parse` exception, then `originalError` will point to it.\n\nIf a generic error is caught, the status will be set to `500`.\n\nIn order to set up your own error handling mechanism, you can use composition in your handler:\n\n```js\nconst {send} = require('micro')\n\nconst handleErrors = fn => async (req, res) => {\n  try {\n    return await fn(req, res)\n  } catch (err) {\n    console.log(err.stack)\n    send(res, 500, 'My custom error!')\n  }\n}\n\nmodule.exports = handleErrors(async (req, res) => {\n  throw new Error('What happened here?')\n})\n```\n\n#### API\n\n##### sendError(req, res, error)\n\n- Use `require('micro').sendError`.\n- Used as the default handler for errors thrown.\n- Automatically sets the status code of the response based on `error.statusCode`.\n- Sends the `error.message` as the body.\n- Stacks are printed out with `console.error` and during development (when `NODE_ENV` is set to `'development'`) also sent in responses.\n- Usually, you don't need to invoke this method yourself, as you can use the [built-in error handling](#error-handling) flow with `throw`.\n\n##### createError(code, msg, orig)\n\n- Use `require('micro').createError`.\n- Creates an error object with a `statusCode`.\n- Useful for easily throwing errors with HTTP status codes, which are interpreted by the [built-in error handling](#error-handling).\n- `orig` sets `error.originalError` which identifies the original error (if any).\n\n### Testing\n\nMicro makes tests compact and a pleasure to read and write.\nWe recommend [ava](https://github.com/sindresorhus/ava), a highly parallel micro test framework with built-in support for async tests:\n\n```js\nconst micro = require('micro')\nconst test = require('ava')\nconst listen = require('test-listen')\nconst request = require('request-promise')\n\ntest('my endpoint', async t => {\n  const service = micro(async (req, res) => {\n    micro.send(res, 200, {\n      test: 'woot'\n    })\n  })\n\n  const url = await listen(service)\n  const body = await request(url)\n\n  t.deepEqual(JSON.parse(body).test, 'woot')\n})\n```\n\nLook at [test-listen](https://github.com/zeit/test-listen) for a\nfunction that returns a URL with an ephemeral port every time it's called.\n\n### Transpilation\n\nWe use [is-async-supported](https://github.com/timneutkens/is-async-supported) combined with [async-to-gen](https://github.com/leebyron/async-to-gen),\nso that we only convert `async` and `await` to generators when needed.\n\nIf you want to do it manually, you can! `micro(1)` is idempotent and\nshould not interfere.\n\n`micro` exclusively supports Node 6+ to avoid a big transpilation\npipeline. `async-to-gen` is fast and can be distributed with\nthe main `micro` package due to its small size.\n\nTo use native `async/await` on Node v7.x, run `micro` like the following.\n\n```bash\nnode --harmony-async-await node_modules/.bin/micro .\n```\n\n### Deployment\n\nYou can use the `micro` CLI for `npm start`:\n\n```json\n{\n  \"name\": \"my-microservice\",\n  \"dependencies\": {\n    \"micro\": \"x.y.z\"\n  },\n  \"main\": \"microservice.js\",\n  \"scripts\": {\n    \"start\": \"micro\"\n  }\n}\n```\n\nThen simply run `npm start`!\n\n#### Port based on environment variable\n\nWhen you want to set the port using an environment variable you can use:\n\n```\nmicro -p $PORT\n```\n\nOptionally you can add a default if it suits your use case:\n\n```\nmicro -p ${PORT:-3000}\n```\n\n`${PORT:-3000}` will allow a fallback to port `3000` when `$PORT` is not defined\n\n## Contribute\n\n1. [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device\n2. Link the package to the global module directory: `npm link`\n3. Transpile the source code and watch for changes: `npm start`\n4. Within the module you want to test your local development instance of micro, just link it to the dependencies: `npm link micro`. Instead of the default one from npm, node will now use your clone of micro!\n\nAs always, you can run the [AVA](https://github.com/sindresorhus/ava) and [ESLint](http://eslint.org) tests using: `npm test`\n\n## Credits\n\nThanks Tom Yandell and Richard Hodgson for donating the  `micro` npm name.\n\n## Authors\n\n- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) - [â–²ZEIT](https://zeit.co)\n- Leo Lamprecht ([@notquiteleo](https://twitter.com/notquiteleo)) - [â–²ZEIT](https://zeit.co)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zeit/micro.git"
  },
  "scripts": {
    "lint": "xo",
    "precommit": "lint-staged",
    "test": "npm run lint && NODE_ENV=test nyc ava"
  },
  "version": "7.3.3",
  "xo": {
    "ignores": [
      "examples/**/*"
    ],
    "extends": "prettier"
  }
}
