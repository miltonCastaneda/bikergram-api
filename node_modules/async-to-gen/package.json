{
  "_args": [
    [
      {
        "raw": "async-to-gen@1.3.3",
        "scope": null,
        "escapedName": "async-to-gen",
        "name": "async-to-gen",
        "rawSpec": "1.3.3",
        "spec": "1.3.3",
        "type": "version"
      },
      "C:\\projects\\JavaScript\\bikergram\\bikergram-api\\node_modules\\micro"
    ]
  ],
  "_from": "async-to-gen@1.3.3",
  "_id": "async-to-gen@1.3.3",
  "_inCache": true,
  "_location": "/async-to-gen",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/async-to-gen-1.3.3.tgz_1493669719889_0.7115095660556108"
  },
  "_npmUser": {
    "name": "leebyron",
    "email": "lee@leebyron.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "async-to-gen@1.3.3",
    "scope": null,
    "escapedName": "async-to-gen",
    "name": "async-to-gen",
    "rawSpec": "1.3.3",
    "spec": "1.3.3",
    "type": "version"
  },
  "_requiredBy": [
    "/micro"
  ],
  "_resolved": "https://registry.npmjs.org/async-to-gen/-/async-to-gen-1.3.3.tgz",
  "_shasum": "d52c9fb4801f0df44abc4d2de1870b48b60e20bb",
  "_shrinkwrap": null,
  "_spec": "async-to-gen@1.3.3",
  "_where": "C:\\projects\\JavaScript\\bikergram\\bikergram-api\\node_modules\\micro",
  "author": {
    "name": "Lee Byron",
    "email": "lee@leebyron.com",
    "url": "http://leebyron.com/"
  },
  "bin": {
    "async-to-gen": "./async-to-gen",
    "async-node": "./async-node"
  },
  "bugs": {
    "url": "https://github.com/leebyron/async-to-gen/issues"
  },
  "dependencies": {
    "babylon": "^6.14.0",
    "magic-string": "^0.19.0"
  },
  "description": "Transform async functions to generator functions with speed and simplicity.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d52c9fb4801f0df44abc4d2de1870b48b60e20bb",
    "tarball": "https://registry.npmjs.org/async-to-gen/-/async-to-gen-1.3.3.tgz"
  },
  "files": [
    "index.js",
    "register.js",
    "async-to-gen",
    "async-node",
    "LICENSE"
  ],
  "gitHead": "58d0f35b54333029d99569fcd46452d583346e61",
  "homepage": "https://github.com/leebyron/async-to-gen",
  "keywords": [
    "async",
    "await",
    "async-await",
    "for-await",
    "for-await-of",
    "generators",
    "compiler",
    "transpiler",
    "transform",
    "es7"
  ],
  "license": "BSD-3-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "leebyron",
      "email": "lee@leebyron.com"
    }
  ],
  "name": "async-to-gen",
  "optionalDependencies": {},
  "readme": "async-to-gen\n============\n\n[![npm](https://img.shields.io/npm/v/async-to-gen.svg?maxAge=86400)](https://www.npmjs.com/package/async-to-gen)\n[![Build Status](https://img.shields.io/travis/leebyron/async-to-gen.svg?style=flat&label=travis&branch=master)](https://travis-ci.org/leebyron/async-to-gen)\n\nTurn your JavaScript with [async functions](https://github.com/tc39/ecmascript-asyncawait) into ES6 generators so they can be used in modern\nbrowsers or in node.js (v0.12 or newer).\n\nAsync functions are an exciting new proposed addition to JavaScript. The v8 team\nis [hard at work](https://bugs.chromium.org/p/v8/issues/detail?id=4483) getting it right, which means it could appear in future versions of node.js. However if\nyou're impatient like me, then you probably just can't wait to get rid of your\npromise triangles and [callback hell](http://callbackhell.com/).\n\nYou can use [Babel](https://babeljs.io/) to accomplish this, but `async-to-gen`\nis a faster, simpler, zero-configuration alternative with minimal dependencies\nfor super-fast `npm install` and transform time.\n\nAlso, `async-to-gen` provides support for [async generators](https://github.com/tc39/proposal-async-iteration)\nwhich return Async Iterators, a great syntax and primitive for producing and\noperating on streams of data.\n\n\n## Get Started!\n\nUse the command line:\n\n```sh\nnpm install --global async-to-gen\n```\n\n```sh\nasync-to-gen --help\nasync-to-gen input.js > output.js\n\n# source maps!\nasync-to-gen input.js --sourcemaps inline > output.js\n```\n\nOr the JavaScript API:\n\n```sh\nnpm install async-to-gen\n```\n\n```js\nvar asyncToGen = require('async-to-gen');\nvar fs = require('fs');\n\nvar input = fs.readFileSync('input.js', 'utf8');\nvar output = asyncToGen(input).toString();\nfs.writeFileSync('output.js', output);\n\n// source maps!\nvar map = asyncToGen(input).generateMap();\nfs.writeFileSync('output.js.map', JSON.stringify(output));\n```\n\n\n## Use `async-node`\n\nWherever you use `node` you can substitute `async-node` and have a super fast\nasync functions aware evaluator or REPL.\n\n```sh\n$ async-node\n> async function answer() {\n... return await 42\n... }\nundefined\n> promise = answer()\nPromise { <pending> }\n> promise.then(console.log)\nPromise { <pending> }\n42\n```\n\n\n## Use the require hook\n\nUsing the require hook allows you to automatically compile files on the fly when\nrequiring in node, useful during development:\n\n```js\nrequire('async-to-gen/register')\nrequire('./some-module-with-async-functions')\n```\n\nYou can also provide options to the require hook:\n\n```js\n// Disable inline source maps for use with development tools.\nrequire('async-to-gen/register')({ sourceMaps: false })\n```\n\nUse options to define exactly which files to `includes` or `excludes` with regular\nexpressions. All files are included by default except those found in the\n`node_modules` folder, which is excluded by default. Pass `excludes: null` to not\nexclude any files.\n\n```js\nrequire('async-to-gen/register')({ includes: /\\/custom_path\\// })\n```\n\n> #### Don't use the require hook in packages distributed on NPM\n> As always, don't forget to use `async-to-gen` to compile files before distributing\n> your code on npm, as using the require hook affects the whole runtime and not\n> just your module and may hurt the runtime performance of code that includes it.\n\n\n## Use in Build Systems:\n\n**Rollup**: [`rollup-plugin-async`](https://github.com/leebyron/rollup-plugin-async)\n\n\n## Common Usage\n\n#### Async I/O\n\nAsync functions are great for writing asynchronous code that *looks* synchronous,\nand that's perfect for writing code that needs to perform async I/O operations.\n\nOne of the original motivations for Node.js was [non-blocking I/O](https://www.youtube.com/watch?v=ztspvPYybIY), perfect! However its core libraries\n[do not yet support Promises](https://github.com/nodejs/node/pull/5020), nor do many popular libraries written for Node ðŸ˜­.\n\nDo not fret, we can fix this with [promisify-node](https://github.com/nodegit/promisify-node)!\n\n```js\nconst promisify = require('promisify-node');\nconst fs = promisify('fs');\n\nasync function emojify(filePath) {\n  const contents = await fs.readFile(filePath, 'utf8')\n  const edited = contents.replace(/:\\)/g, 'ðŸ˜‰')\n  await fs.writeFile(filePath, edited, 'utf8')\n}\n```\n\n#### Mocha\n\nWriting tests in mocha? Async functions are super handy for testing any code\nusing promises and already work out of the box! To enable async functions in\nmocha include the require hook when you run your tests:\n\n```bash\nmocha --require async-to-gen/register test.js\n```\n\nThen in your tests, use async functions in your `it` clauses:\n\n```js\ndescribe('My Promising Module', () => {\n\n  it('promises to give a value', async () => {\n    expect(await myFunction('input')).to.equal('output')\n  })\n\n})\n```\n\nTesting your [express](http://expressjs.com/) app?\nTry [supertest](https://github.com/visionmedia/supertest/) and async functions:\n\n```js\nconst express = require('express')\nconst request = require('supertest')\n\nconst app = express()\napp.get('/foo', (req, res) => res.send('bar'))\n\ndescribe('My express app', () => {\n\n  it('loads foo', async () => {\n    const response = await request(app).get('/foo')\n    expect(response.body).to.equal('bar')\n  })\n\n})\n```\n\n#### Jest\n\nWriting tests in Jest? Use the [scriptPreprocessor](http://facebook.github.io/jest/docs/api.html#scriptpreprocessor-string) entry in your jest configuration in package.json:\n\n```js\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.js$\": \"async-to-gen\"\n    }\n  },\n  \"devDependencies\": {\n    \"async-to-gen\": \"*\"\n  }\n}\n```\n\n#### Scripts\n\nHave interactive scripts that require lots of input from the user? Async\nfunctions make writing those much easier! Check out [interactive-script](https://github.com/leebyron/interactive-script).\n\n```bash\nnpm install interactive-script\n```\n\nThen write your script:\n\n```js\nconst interactive = require('interactive-script')\ninteractive(async (say, ask) => {\n  say('What is your favorite number?')\n  let num;\n  do {\n    num = Math.ceil(Math.random() * 100)\n  } while (!await ask(`Is it ${num}? `, 'yN'))\n  say(`Great, I think ${num} is a fine number.`)\n})\n```\n\nAnd run it with `async-node`:\n\n```bash\nasync-node myScript.js\n```\n\n#### Streams\n\nStreaming data can be a challenging thing to get right. While [Observables](http://reactivex.io/documentation/observable.html) have provided a great library for\nstreamed data, Async Generators provides language-level support for this concept!\n\nConsider subscribing to a web socket within an program using async functions:\n\n```js\nasync function* stockTickerInEuro(symbol) {\n  var socket = await openWebSocket('ws://stocks.com/' + symbol)\n  try {\n    for await (var usd of socket) {\n      var euro = usd * await loadExchangeRateUSD2EUR()\n      yield euro\n    }\n  } finally {\n    closeWebSocket(socket)\n  }\n}\n```\n\nThen calling this function produces an Async Iterator (an Iterator of Promises)\nof stock ticker values.\n\n```js\nvar ticker = stockTickerInEuro('AAPL')\nticker.next().then(step => console.log(step.value))\n```\n\nOr use `for-await-of` loops within another async function:\n\n```js\nasync function bloombergTerminal() {\n  for await (var price of stockTickerInEuro('AAPL')) {\n    console.log(price)\n  }\n}\n```\n\n## Dead-Simple Transforms\n\nWhen `async-to-gen` transforms async functions, it makes as few edits as\npossible, and does not affect the location of lines in a file, leading to easier\nto understand stack traces when debugging.\n\nIt also includes a very small conversion function at the bottom of the file.\nHow small? 204 chars for async functions and 533 chars for async generators.\n\n**Before:**\n\n```js\nasync function foo() {\n  return await x\n}\n```\n\n**After:**\n\n```js\nfunction foo() {return __async(function*(){\n  return yield x\n}())}\n\nfunction __async(g){/* small helper function */}\n```\n\n\n## Using with Babel\n\nDon't bother using both! If you're already using Babel (maybe you need JSX,\nother proposed features, or are supporting older versions of Node) then you\nmight be excited to hear that using [babel-preset-es2017](https://babeljs.io/docs/plugins/preset-es2017/)\nin your `.babelrc` will provide support for async functions!\n\nBabel is an amazing tool that you should consider using, however `async-to-gen`\nintentionally makes some different choices to provide a different set of\ntrade-offs. Babel is general-purpose and supports a wider set of features but\nrequires some configuration and more dependencies and those features may cost\nbuild performance or output code quality. `async-to-gen` can only do one thing,\nbut that simplicity lends itself towards faster builds and cleaner output.\n\nUltimately, if you only need to add async function support you should try\n`async-to-gen` but if you need more features then you should use Babel.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/leebyron/async-to-gen.git"
  },
  "scripts": {
    "test": "DIFF=$(./async-to-gen test/source.js | diff test/expected.js -); if [ -n \"$DIFF\" ]; then echo \"$DIFF\"; exit 1; fi; RES=$(node -e 'require(\"./register\");require(\"./test/test-node-module.js\")'); if [ \"$RES\" != 42 ]; then echo 'Node register hook failed'; exit 1; fi; ASYNC_NODE=$(./async-node ./test/test-node-module.js); if [ \"$ASYNC_NODE\" != 42 ]; then echo 'async-node failed'; exit 1; fi; ASYNC_GEN_NODE=$(./async-node ./test/test-async-generator.js); if [ \"$ASYNC_GEN_NODE\" != 42 ]; then echo 'async-node failed for async generators'; exit 1; fi; ./async-to-gen test/memtest.js | node --max-old-space-size=10;",
    "test-update": "./async-to-gen test/source.js > test/expected.js"
  },
  "version": "1.3.3"
}
