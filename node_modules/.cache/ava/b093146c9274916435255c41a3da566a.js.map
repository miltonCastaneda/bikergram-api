{"version":3,"sources":["pictures-test.js"],"names":["t","image","getImage","srv","url","body","uri","publicId","json","deepEqual","todo"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AAIA;;;;AAMA;;;;AACA;;;;AACA;;;;;;;AAXA;;;;AAIA;;;;;;;AASA,mBAAK,UAAL;AAAA,+BAAiB,WAAMA,CAAN,EAAW;AAC1B;;;AAGA,QAAIC,QAAQ,mBAASC,QAAT,EAAZ;;AAEA;;;;;AAKA,QAAIC,MAAM,wCAAV;;AAEA;;;;;AAKA,QAAIC,MAAM,MAAM,0BAAOD,GAAP,CAAhB;AACA;;;;;;AAMA,QAAIE,OAAO,MAAM,8BAAQ,EAAEC,KAAM,GAAEF,GAAI,IAAGH,MAAMM,QAAS,EAAhC,EAAmCC,MAAM,IAAzC,EAAR,CAAjB;AACA;AACAR,MAAES,SAAF,CAAYJ,IAAZ,EAAkBJ,KAAlB;AACD,GA5BD;;AAAA;AAAA;AAAA;AAAA;;AA8BA;;;AAGA,cAAKS,IAAL,CAAU,QAAV;AACA,cAAKA,IAAL,CAAU,gBAAV","file":"pictures-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\n/**\r\n * permite hacer testing en microservicios con micro\r\n */\r\nimport listen from 'test-listen'\r\n/**\r\n * permite usar http pero con promesas\r\n * funciona igual que el modulo request\r\n * solo que implementa promises\r\n */\r\nimport request from 'request-promise'\r\nimport fixtures from './fixtures/'\r\nimport pictures from '../pictures'\r\n\r\ntest('Get /:id', async t => {\r\n  /**\r\n   * Obtenemos un objeto de imagen\r\n   */\r\n  let image = fixtures.getImage()\r\n\r\n  /**\r\n   * en vez de crear la funcion asincrona le pasamos lo que\r\n   * exporta micro en pictures mediante send\r\n   */\r\n\r\n  let srv = micro(pictures)\r\n\r\n  /**\r\n   * listen corre el servidor y retorna la url\r\n   * en que el servidor esta correndo\r\n   */\r\n\r\n  let url = await listen(srv)\r\n  /**\r\n   * resolver la promesa del request le pasaomos\r\n   * la url y concatenamos el id,\r\n   * json: true, para verificar la respuesta retorne los datos\r\n   * en json\r\n   */\r\n  let body = await request({ uri: `${url}/${image.publicId}`, json: true })\r\n  /** validacion del cuerpo sea igual a id */\r\n  t.deepEqual(body, image)\r\n})\r\n\r\n/**\r\n * Definir test sin necesidad de usar el test aun\r\n */\r\ntest.todo('POST /')\r\ntest.todo('POST /:id/like')\r\n"]}