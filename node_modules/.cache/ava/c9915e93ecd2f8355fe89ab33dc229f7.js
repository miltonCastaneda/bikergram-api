'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _micro = require('micro');

var _micro2 = _interopRequireDefault(_micro);

var _uuidBase = require('uuid-base62');

var _uuidBase2 = _interopRequireDefault(_uuidBase);

var _testListen = require('test-listen');

var _testListen2 = _interopRequireDefault(_testListen);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _pictures = require('../pictures');

var _pictures2 = _interopRequireDefault(_pictures);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
/**
 * permite hacer testing en microservicios con micro
 */

/**
 * permite usar http pero con promesas
 * funciona igual que el modulo request
 * solo que implementa promises
 */


(0, _ava2.default)('Get /:id', (() => {
  var _ref = _asyncToGenerator(function* (t) {
    let id = _uuidBase2.default.v4();

    /**
     * en vez de crear la funcion asincrona le pasamos lo que
     * exporta micro en pictures mediante send
     */

    let srv = (0, _micro2.default)(_pictures2.default);

    /**
     * listen corre el servidor y retorna la url
     * en que el servidor esta correndo
     */

    let url = yield (0, _testListen2.default)(srv);
    /**
     * resolver la promesa del request le pasaomos
     * la url y concatenamos el id,
     * json: true, para verificar la respuesta retorne los datos
     * en json
     *
     */
    let body = yield (0, _requestPromise2.default)({ uri: `${url}/${id}`, json: true });
    /** validacion del cuerpo sea igual a id */
    t.deepEqual(body, { id });
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());

/**
 * Definir test sin necesidad de usar el test aun
 */
_ava2.default.todo('POST /');
_ava2.default.todo('POST /:id/like');
//# sourceMappingURL=..\node_modules\.cache\ava\c9915e93ecd2f8355fe89ab33dc229f7.js.map