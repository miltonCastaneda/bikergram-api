{"version":3,"sources":["pictures-test.js"],"names":["t","id","v4","srv","url","body","uri","json","deepEqual","todo"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AACA;;;;AAIA;;;;AAMA;;;;AACA;;;;;;;AAVA;;;;AAIA;;;;;;;AAQA,mBAAK,UAAL;AAAA,+BAAiB,WAAMA,CAAN,EAAW;AAC1B,QAAIC,KAAK,mBAAKC,EAAL,EAAT;;AAEA;;;;;AAKA,QAAIC,MAAM,wCAAV;;AAEA;;;;;AAKA,QAAIC,MAAM,MAAM,0BAAOD,GAAP,CAAhB;AACA;;;;;;;AAOA,QAAIE,OAAO,MAAM,8BAAQ,EAAEC,KAAM,GAAEF,GAAI,IAAGH,EAAG,EAApB,EAAuBM,MAAM,IAA7B,EAAR,CAAjB;AACA;AACAP,MAAEQ,SAAF,CAAYH,IAAZ,EAAkB,EAAEJ,EAAF,EAAlB;AACD,GA1BD;;AAAA;AAAA;AAAA;AAAA;;AA4BA;;;AAGA,cAAKQ,IAAL,CAAU,QAAV;AACA,cAAKA,IAAL,CAAU,gBAAV","file":"pictures-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\nimport uuid from 'uuid-base62'\r\n/**\r\n * permite hacer testing en microservicios con micro\r\n */\r\nimport listen from 'test-listen'\r\n/**\r\n * permite usar http pero con promesas\r\n * funciona igual que el modulo request\r\n * solo que implementa promises\r\n */\r\nimport request from 'request-promise'\r\nimport pictures from '../pictures'\r\n\r\ntest('Get /:id', async t => {\r\n  let id = uuid.v4()\r\n\r\n  /**\r\n   * en vez de crear la funcion asincrona le pasamos lo que\r\n   * exporta micro en pictures mediante send\r\n   */\r\n\r\n  let srv = micro(pictures)\r\n\r\n  /**\r\n   * listen corre el servidor y retorna la url\r\n   * en que el servidor esta correndo\r\n   */\r\n\r\n  let url = await listen(srv)\r\n  /**\r\n   * resolver la promesa del request le pasaomos\r\n   * la url y concatenamos el id,\r\n   * json: true, para verificar la respuesta retorne los datos\r\n   * en json\r\n   *\r\n   */\r\n  let body = await request({ uri: `${url}/${id}`, json: true })\r\n  /** validacion del cuerpo sea igual a id */\r\n  t.deepEqual(body, { id })\r\n})\r\n\r\n/**\r\n * Definir test sin necesidad de usar el test aun\r\n */\r\ntest.todo('POST /')\r\ntest.todo('POST /:id/like')\r\n"]}