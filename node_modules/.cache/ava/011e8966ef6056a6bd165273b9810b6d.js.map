{"version":3,"sources":["pictures-test.js"],"names":["beforeEach","t","srv","context","url","image","getImage","body","uri","publicId","json","deepEqual","todo","options","method","description","src","userId","resolveWithfullResponse","response","is","statusCode"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AAIA;;;;AAMA;;;;AACA;;;;AACA;;;;;;;AAXA;;;;AAIA;;;;;;;AASA,cAAKA,UAAL;AAAA,+BAAgB,WAAMC,CAAN,EAAW;AACzB,QAAIC,MAAM,wCAAV;AACAD,MAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,GAAP,CAAtB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKA,mBAAK,UAAL;AAAA,gCAAiB,WAAMD,CAAN,EAAW;AAC1B,QAAII,QAAQ,mBAASC,QAAT,EAAZ;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;AACA,QAAIG,OAAO,MAAM,8BAAQ,EAAEC,KAAM,GAAEJ,GAAI,IAAGC,MAAMI,QAAS,EAAhC,EAAmCC,MAAM,IAAzC,EAAR,CAAjB;AACAT,MAAEU,SAAF,CAAYJ,IAAZ,EAAkBF,KAAlB;AACD,GALD;;AAAA;AAAA;AAAA;AAAA;;AAOA;;;AAGA,cAAKO,IAAL,CAAU,QAAV;AAAA,gCAAoB,WAAMX,CAAN,EAAW;AAC7B,QAAII,QAAQ,mBAASC,QAAT,EAAZ;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA;;;;;AAKA,QAAIS,UAAU;AACZC,cAAQ,MADI;AAEZN,WAAKJ,GAFO;AAGZM,YAAM,IAHM;AAIZH,YAAM;AACJQ,qBAAaV,MAAMU,WADf;AAEJC,aAAKX,MAAMW,GAFP;AAGJC,gBAAQZ,MAAMY;AAHV,OAJM;AASZC,+BAAyB;AATb,KAAd;;AAYA,QAAIC,WAAW,MAAM,8BAAQN,OAAR,CAArB;;AAEAZ,MAAEmB,EAAF,CAAKD,SAASE,UAAd,EAA0B,GAA1B;AACApB,MAAEU,SAAF,CAAYQ,SAASZ,IAArB,EAA2BF,KAA3B;AACD,GAzBD;;AAAA;AAAA;AAAA;AAAA;;AA2BA,cAAKO,IAAL,CAAU,gBAAV","file":"pictures-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\n/**\r\n * permite hacer testing en microservicios con micro\r\n */\r\nimport listen from 'test-listen'\r\n/**\r\n * permite usar http pero con promesas\r\n * funciona igual que el modulo request\r\n * solo que implementa promises\r\n */\r\nimport request from 'request-promise'\r\nimport fixtures from './fixtures/'\r\nimport pictures from '../pictures'\r\n\r\ntest.beforeEach(async t => {\r\n  let srv = micro(pictures)\r\n  t.context.url = await listen(srv)\r\n})\r\n\r\ntest('Get /:id', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let body = await request({ uri: `${url}/${image.publicId}`, json: true })\r\n  t.deepEqual(body, image)\r\n})\r\n\r\n/**\r\n * Guardar imagen\r\n */\r\ntest.todo('POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n\r\n  /**\r\n   * resolveWithfullResponse: true\r\n   * resover la respuesta completa y retornar un response en vez\r\n   * de solo el body\r\n   */\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    resolveWithfullResponse: true\r\n  }\r\n\r\n  let response = await request(options)\r\n\r\n  t.is(response.statusCode, 201)\r\n  t.deepEqual(response.body, image)\r\n})\r\n\r\ntest.todo('POST /:id/like')\r\n"]}